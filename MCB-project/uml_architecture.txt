@startuml
class EntryPoint{
RobotController* m_RobotController
int main()
bool Initialize()
void Update(uint32_t cycleTimeInUS = 10, bool runRobot = true)
void Destroy()
}

class DrivetrainController{
std::shared_ptr<CommunicationHandler> m_CommunicationHandler 
std::shared_ptr<HardwareHandler> m_HardwareHandler
std::shared_ptr<RefereeSystem> m_RefereeSystem
bool m_IsTurretCentric
bool m_IsBeyblading
char m_OverrideStatus
uint32_t m_MotorFL
uint32_t m_MotorFR
uint32_t m_MotorBL
uint32_t m_MotorBR
bool Initialize()
void Update()
void EmergencyStop()
void OverrideWithController()
void OverrideWithKeyboard()
void SetReferenceAngle(float newAngle)
void Rotate(float angle)
void MoveDrivetrain(float angle, uint32_t speed)
void SetTurretCentric(bool isTurretCentric)
void SetBeyblade(bool isBeyblading)
void LockDrivetrain()
void UnlockDrivetrain()
bool ToggleTurretCentric()
bool ToggleBeyblade()
bool GetIsTurretCentric()
bool GetIsBeyblading()
char GetOverride()
float GetAngle()
}

class TurretController {
std::shared_ptr<CommunicationHandler> m_CommunicationHandler 
std::shared_ptr<HardwareHandler> m_HardwareHandler
std::shared_ptr<RefereeSystem> m_RefereeSystem
char m_OverrideStatus
bool m_IsShooting
float m_YawAngle
float m_PitchAngle
uint32_t m_FlywheelL
uint32_t m_FlywheelR
uint32_t m_Indexer
uint32_t m_PitchMotor
uint32_t m_YawMotor
bool Initialize()
void Update()
void EmergencyStop()
void Rotate(float angle)
void OverrideWithController()
void OverrideWithKeyboard()
void SetShooting(bool isShooting)
void SetPitchAngle(float angle)
void SetYawAngle(float angle)
bool GetShooting()
char GetOverride()
float GetYawAngle()
float GetPitchAngle()
}

class Core {
#include "tap/algorithms/smooth_pid.hpp"
#include "tap/board/board.hpp"
#include "drivers_singleton.hpp"
#include "tap/architecture/periodic_timer.hpp"
#include "tap/motor/dji_motor.hpp"
#include <cmath>
#include <iostream>
#include <string>
void Initialize()
}

class CommunicationHandler {
char* m_UartOutput
bool Initialize()
void Update()
void SendUart(const char* message)
uint8_t GetSwitchState(const char* switchID)
float GetStickValue(const char stickID)
float GetWheelValue()
bool GetIsInitialized()
char* GetKeysPressed()
bool GetRightMouseClicked()
bool GetLeftMouseClicked()
std::pair<int, int> GetMouseCoords()
char* GetUartOutput()
}

class RobotController {
DrivetrainController* s_DrivetrainController
TurretController* s_TurretController
bool Initialize()
void Update()
void EmergencyStop()
}

class RefereeSystem {
m_IsInitialized
bool Initialize()
void Update()
float GetChasisPower()
float GetGimbalPower()
float GetShooterPower()
uint32_t GetHealth()
uint32_t GetShooterSpeed()
uint32_t GetShooterVelocity()
}

class HardwareHandler{
m_IsInitialized
tap::motor::DjiMotor m_MotorArray[2][8]
bool m_IsDataSent
bool Initialize()
void UpdateIMU()
void CalibrateIMU()
void SetMotorOutput(const char* motorID, int output)
void PollCanData()
void SendCanData()
uint32_t GetMotorShaftRPM(const char* motorID)
bool GetIsDataSent()
float GetMotorAngle(const char* motorID)
float GetIMUAngle()
bool GetIsIMUCalibrated
}

EntryPoint-up->RobotController
RobotController-up->TurretController
RobotController-up->DrivetrainController
DrivetrainController-up->CommunicationHandler
TurretController-up->CommunicationHandler
DrivetrainController-up->HardwareHandler
TurretController-up->HardwareHandler
DrivetrainController-up->RefereeSystem
TurretController-up->RefereeSystem
CommunicationHandler -up->Core
RefereeSystem-up->Core
HardwareHandler-up->Core
@enduml
